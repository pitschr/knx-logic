package li.pitschmann.knx.logic.db.strategies;

import li.pitschmann.knx.core.utils.Stopwatch;
import li.pitschmann.knx.logic.components.InboxComponentImpl;
import li.pitschmann.knx.logic.db.DatabaseManager;
import li.pitschmann.knx.logic.db.dao.ComponentsDao;
import li.pitschmann.knx.logic.db.jdbi.mappers.ComponentType;
import li.pitschmann.knx.logic.db.models.ComponentModel;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.concurrent.TimeUnit;

/**
 * {@link PersistenceStrategy} implementation for {@link InboxComponentImpl}
 *
 * @author PITSCHR
 */
public class InboxComponentPersistenceStrategy extends AbstractComponentPersistenceStrategy<InboxComponentImpl> {
    private static final Logger LOG = LoggerFactory.getLogger(InboxComponentPersistenceStrategy.class);

    public InboxComponentPersistenceStrategy(final DatabaseManager databaseManager) {
        super(databaseManager);
    }

    @Override
    protected int insert(final InboxComponentImpl component) {
        final var sw = Stopwatch.createStarted();
        LOG.trace("Database write request for inbox component: {}", component);

        final var componentModel = ComponentModel.builder()
                .uid(component.getUid())
                .className(component.getWrappedObject().getClass())
                .componentType(ComponentType.INBOX)
                .build();

        // insert component
        final var componentId = verifyAutoGeneratedKey(databaseManager.dao(ComponentsDao.class).insert(componentModel));

        // insert connectors and related pins
        insertConnectors(componentId, component.getOutputConnectors());

        // insert event key
        insertEventKey(componentId, component.getEventKey());

        LOG.info("Inbox component for class '{}' written to database (new id={}) and it took {} ms: {}", component.getClass().getName(),
                sw.elapsed(TimeUnit.MILLISECONDS), componentId, component);

        return componentId;
    }

    @Override
    protected int update(final ComponentModel componentModel, final InboxComponentImpl component) {
        // update connectors and related pins
        updateConnectors(componentModel, component.getOutputConnectors());

        // update the event key model
        updateEventKey(componentModel, component.getEventKey());

        return componentModel.getId();
    }

    @Override
    public Class<InboxComponentImpl> compatibleClass() {
        return InboxComponentImpl.class;
    }
}
